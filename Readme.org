#+title Emacs Config
#+PROPERTY: header-args :tangle ./init.el

* Overview

The following is my emacs config that gets exported to my init.el

* General

A place for general config that I have not had time to order just yet.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t
        visible-bell t)

  (hl-line-mode 1)                     ; Highlight current line
  (blink-cursor-mode -1)               ; Solid cursor
  (tool-bar-mode -1)                   ; Hide toolbar
  (scroll-bar-mode -1)                 ; Hide scrollbar
  (menu-bar-mode -1)                   ; Hide menu bar

  ;; Display line numbers
  (column-number-mode 1)
  (global-display-line-numbers-mode 1)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Store old commands
  (setq history-length 25)
  (savehist-mode 1)

  ;; Come back to where I left off.
  (save-place-mode 1)

  ;; Keep random variables out of my config
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror' 'nomessage)

  ;; Auto-update files
  (global-auto-revert-mode 1)

  ;; Start maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; Let me escape

#+end_src

* Use Package

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  
#+end_src

* Themes

** General

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-vibrant t)

    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 40)))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src


** Fonts

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))
  
  (set-face-attribute 'default nil :font "Fira Code" :height 130)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 130)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 130 :weight 'regular)

#+end_src


** Under Consideration

The following enable doom styles for neotree or treemacs

#+begin_src emacs-lisp
  ;;(doom-themes-neotree-config)

  ;;(setq doom-themes-treemacs-theme "doom-colors")
  ;;(doom-themes-treemacs-config)
#+end_src


* UX

** Which Key

#+begin_src emacs-lisp
  
  (use-package which-key
    :init (which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 0.3))

#+end_src


** Helpful



#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Projectile

#+begin_src emacs-lisp
  
  (use-package projectile
    :diminish projectile-mode
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom ((projectile-completion-system 'ivy))
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-swotch-project-action #'projectile-dired)
    (projectile-mode 1))

  (use-package counsel-projectile
    :init (counsel-projectile-mode))

  (use-package ripgrep)

  (use-package rg)

#+end_src

* Org Mode

** General

#+begin_src emacs-lisp

  (defun isard/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (isard/org-font-setup)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . isard/org-mode-setup  )
    :config
    (setq org-ellipsis " ▾"
          org-src-fontify-natively t))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun isard/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . isard/org-mode-visual-fill))

#+end_src


** Fonts

#+begin_src emacs-lisp

            (defun isard/org-font-setup ()
                ;; Replace list hyphen with dot
                (font-lock-add-keywords 'org-mode
                                        '(("^ *\\([-]\\) "
                                           (0 (prog1 ()
                                                (compose-region
                                                 (match-beginning 1)
                                                 (match-end 1)
                                                 "•"))))))

                ;; Set faces for heading levels
                (dolist (face '((org-level-1 . 1.2)
                                (org-level-2 . 1.1)
                                (org-level-3 . 1.05)
                                (org-level-4 . 1.0)
                                (org-level-5 . 1.1)
                                (org-level-6 . 1.1)
                                (org-level-7 . 1.1)
                                (org-level-8 . 1.1)))
                  (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

                ;; Ensure that anything that should be fixed-pitch in Org files appears that way
                (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
                (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
                (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
                (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
                (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
                (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
                (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src


** Templates

#+begin_src emacs-lisp

  (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  
#+end_src

* Counsel

** General

#+begin_src emacs-lisp
  
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  (global-key-binding (kbd "C-M-j") 'counsel-switch-buffer)
  (global-key-binding (kbd "C-M-k") 'counsel-switch-buffer)

#+end_src

** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode))

#+end_src

* Evil Mode

#+begin_src emacs-lisp

  (defun isard/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circle-server-mode
                    circle-chat-mode
                    circle-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-want-C-i-jump nil)
    (evil-mode 1)
    :hook (evil-mode . isard/evil-hook)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil magit
    :config (evil-collection-init))
  
#+end_src

* Magit

#+begin_src emacs-lisp
  
  (setenv "GIT_ASKPASS" "git-gui--askpass")

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit)

  (use-package ssh-agency)

#+end_src

* Key Bindings
** General

General allows me to set keybindings for various things with leader keys. This should save me from emacs pinky!

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer isard/leader-keys
                            :keymaps '(normal insert visual emacs)
                            :prefix "SPC"
                            :global-prefix "C-SPC"))

  (isard/leader-keys
   "t" '(:ignore t :which-key "toggles")
   "ts" '(hydra-text-scale/body :which-key "scale"))

#+end_src

** Hydra

Hydra allows me to define contextual menus that can potentially disappear over time.

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale-text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

#+end_src
